#include <zephyr/kernel.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/audio/iso.h>
#include <bluetooth/audio/bap.h>
#include <pm/pm.h>

#define PDR_THRESHOLD 70
#define R_MAX 3
#define T_SLEEP_MS 60000
#define DURATION_CIS_GOOD_MS 30000

enum audio_mode {
    MODE_BIS,
    MODE_CIS
};

static enum audio_mode mode = MODE_BIS;
static int retry_count = 0;
static int pdr_current = 100;
static bool audio_active = true;

static void enter_sleep_mode(void) {
    printk("Entering System-Off Sleep Mode\n");
    pm_state_force(0, &(struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
    k_sleep(K_FOREVER);
}

void main(void) {
    int err = bt_enable(NULL);
    if (err) {
        printk("Bluetooth init failed (err %d)\n", err);
        return;
    }
    printk("Bluetooth init successful\n");

    while (true) {
        if (mode == MODE_BIS) {
            printk("Current Mode: BIS\n");
            printk("Starting BIS broadcast stream...\n");
            start_bis_stream();
            printk("BIS stream started\n");

            pdr_current = get_current_pdr();
            printk("Current PDR: %d%%\n", pdr_current);

            if (pdr_current < PDR_THRESHOLD) {
                printk("PDR below threshold. Sending AUX_SCAN_REQ...\n");
                bool source_responded = send_aux_scan_req();

                if (!source_responded) {
                    retry_count++;
                    printk("No response from source. Retry count: %d\n", retry_count);
                } else {
                    retry_count = 0;
                    printk("Source responded. Retry count reset.\n");
                }

                if (retry_count >= R_MAX) {
                    printk("Retry limit exceeded. Switching to CIS mode.\n");
                    stop_bis_stream();
                    printk("BIS stream stopped\n");
                    start_cis_connection();
                    printk("CIS connection established\n");
                    mode = MODE_CIS;
                    retry_count = 0;
                }
            }

        } else if (mode == MODE_CIS) {
            printk("Current Mode: CIS\n");
            start_cis_stream();
            printk("CIS stream started\n");

            pdr_current = get_current_pdr();
            printk("Current PDR: %d%%\n", pdr_current);

            if (pdr_current >= PDR_THRESHOLD) {
                printk("Good PDR detected in CIS. Waiting for stability (%dms)...\n", DURATION_CIS_GOOD_MS);
                k_sleep(K_MSEC(DURATION_CIS_GOOD_MS));
                mode = MODE_BIS;
                stop_cis_stream();
                printk("CIS stream stopped\n");
            }
        }

        if (!audio_active_for(T_SLEEP_MS)) {
            printk("No audio activity detected for %d ms.\n", T_SLEEP_MS);
            enter_sleep_mode();
            mode = MODE_BIS;
        }

        k_sleep(K_SECONDS(1));
    }
}
